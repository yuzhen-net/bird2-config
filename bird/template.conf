# template bgp dnpeers {
#     local as OWNAS;
#     path metric 1;
#     direct;
# 
#     ipv4 {
#         import filter {
#             if is_valid_network() && !is_self_net() then {
#                 if (roa_check(dn42_roa, net, bgp_path.last) != ROA_VALID) then {
#                     print "[dn42] ROA check failed for ", net, " ASN ", bgp_path.last;
#                     reject;
#                 }
#                 accept;
#             }
#             reject;
#         };
# 
#         export filter {
#             if is_valid_network() && source ~ [RTS_STATIC, RTS_BGP] then accept;
#             reject;
#         };
#         
#         import table;
#         next hop self;
#     };
# 
#     ipv6 {
#         import filter {
#             if is_valid_network_v6() && !is_self_net_v6() then {
#                 if (roa_check(dn42_roa_v6, net, bgp_path.last) != ROA_VALID) then {
#                     print "[dn42] ROA check failed for ", net, " ASN ", bgp_path.last;
#                     reject;
#                 }
#                 accept;
#             }
#             reject;
#         };
#         export filter {
#             if is_valid_network_v6() && source ~ [RTS_STATIC, RTS_BGP] then accept;
#             reject;
#         };
#         
#         import table;
#         next hop self;
#     };
#
#     graceful restart on;
# }

template bgp yznet_internal {
    local as OWNAS;
    path metric 1;
    direct;

    ipv6 {
        import all;
        export all;

        next hop self;
    };

    graceful restart on;
}

template bgp ebgp_peer_upstream {
    local as OWNAS;
    direct;

    ipv6 {
        import all;
        export filter {
            if net ~ OWNNETSET then accept;
            reject;
        };

        import table;
    };

    graceful restart on;
}

template bgp ebgp_downstream {
    local as OWNAS;
    direct;

    ipv6 {
        import filter {
            if is_bogon_prefix() then reject;
            if is_bogon_asn() then reject;
            accept;
        };
        export filter {
            if is_bogon_prefix() then reject;
            if is_bogon_asn() then reject;
            accept;
        };

        import table;
    };

    graceful restart on;
}