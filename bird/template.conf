template bgp yznet_internal {
    local as OWNAS;
    source address ZEROTIER;
    path metric 1;
    direct;

    ipv6 {
        import all;
        export all;

        next hop self;
    };

    graceful restart on;
}

function filter_all() {
    case net.type {
        NET_IP4:
            if (roa_check(dn42_roa, net, bgp_path.last) ~ [ROA_INVALID]) then {
                print "[dn42] ROA check invalid for ", net, " ASN ", bgp_path.last;
                reject;
            }
            if (roa_check(clearnet_roa, net, bgp_path.last) ~ [ROA_INVALID]) then {
                print "[clearnet] ROA check invalid for ", net, " ASN ", bgp_path.last;
                reject;
            }
        NET_IP6:
            if (roa_check(dn42_roa_v6, net, bgp_path.last) ~ [ROA_INVALID]) then {
                print "[dn42] ROA check invalid for ", net, " ASN ", bgp_path.last;
                reject;
            }
            if (roa_check(clearnet_roa_v6, net, bgp_path.last) ~ [ROA_INVALID]) then {
                print "[clearnet] ROA check invalid for ", net, " ASN ", bgp_path.last;
                reject;
            }
        else: print "filter_all: unexpected net.type ", net.type, " ", net;
    }
    if is_bogon_prefix() then reject;
    if is_bogon_asn() then reject;
    if net ~ OWNNETSET then accept;
    else if net ~ OWNNETSETA then accept;
    # if bgp_path.first ~ [ 
    #     213045, 211509, 142553, 212294, 200579, 210631, 211367, 203888, 202952, 206271
    # ] then accept;
    reject;
}

filter prepend0 {
    filter_all();
};

filter prepend1 {
    bgp_path.prepend(211390);
    filter_all();
};

filter prepend2 {
    bgp_path.prepend(211390);
    bgp_path.prepend(211390);
    filter_all();
};

filter prepend3 {
    bgp_path.prepend(211390);
    bgp_path.prepend(211390);
    bgp_path.prepend(211390);
    filter_all();
};

template bgp ebgp_peer_upstream {
    local as OWNAS;
    direct;

    ipv6 {
        import all;
        export filter prepend0;

        import table;
    };

    graceful restart on;
}

template bgp ebgp_full_table {
    local as OWNAS;
    direct;

    ipv6 {
        import filter {
            if is_bogon_prefix() then reject;
            if is_bogon_asn() then reject;
            accept;
        };
        export filter {
            if is_bogon_prefix() then reject;
            if is_bogon_asn() then reject;
            accept;
        };

        import table;
    };

    graceful restart;
}

template bgp ebgp_downstream {
    local as OWNAS;
    direct;

    ipv6 {
        import filter {
            if is_bogon_prefix() then reject;
            if is_bogon_asn() then reject;
            accept;
        };
        export filter {
            if is_bogon_prefix() then reject;
            if is_bogon_asn() then reject;
            accept;
        };

        import table;
    };

    graceful restart on;
}

template bgp route_collector {
    local as OWNAS;
    multihop;

    ipv6 {
        add paths tx;

        import none;
        export filter {
            if is_bogon_prefix() then reject;
            accept;
        };
    };

    graceful restart on;
}